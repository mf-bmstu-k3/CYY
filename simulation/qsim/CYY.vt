// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/21/2024 07:36:28"
                                                                                
// Verilog Test Bench template for design : CYY
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module CYY_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg [7:0] q_a;
reg [7:0] q_b;
reg set;
// wires                                               
wire [7:0]  a;
wire [7:0]  address_OP;
wire [7:0]  b;
wire [7:0]  CK;
wire cop;
wire [7:0]  data_in_OP;
wire [7:0]  data_out_OP;
wire [1:0]  priznak;
wire [7:0]  RA;
wire [7:0]  RK;
wire [15:0]  rr;
wire [2:0]  s_out;
wire sko;
wire sno;
wire wr_en_OP;

// assign statements (if any)                          
CYY i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.address_OP(address_OP),
	.b(b),
	.CK(CK),
	.clk(clk),
	.cop(cop),
	.data_in_OP(data_in_OP),
	.data_out_OP(data_out_OP),
	.priznak(priznak),
	.q_a(q_a),
	.q_b(q_b),
	.RA(RA),
	.RK(RK),
	.rr(rr),
	.s_out(s_out),
	.set(set),
	.sko(sko),
	.sno(sno),
	.wr_en_OP(wr_en_OP)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

